---
import Layout from '../layouts/Layout.astro';
import MentionCard from '../components/MentionCard.astro';
import { bookMentions } from '../data/mentions';

const sortedMentions = [...bookMentions].sort((a, b) => 
  new Date(b?.metadata?.dateAdded || '').getTime() - new Date(a?.metadata?.dateAdded || '').getTime()
);

const uniqueTags = Array.from(new Set(bookMentions.flatMap(mention => mention?.metadata?.tags || []))).sort();
const sentiments = ['all', 'positive', 'neutral', 'critical'] as const;
---

<Layout title="Archive - All Book Mentions" description="Browse our complete collection of book mentions from notable writers, thinkers, and creators.">
  <!-- Hero Section -->
  <section class="bg-gradient-to-b from-orange-50/50 to-white dark:from-stone-900 dark:to-stone-900 py-16">
    <div class="max-w-4xl mx-auto px-6">
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-light text-stone-900 dark:text-stone-100 mb-6 tracking-tight">
          Complete Archive
        </h1>
        <p class="text-lg text-stone-600 dark:text-stone-400 font-light max-w-2xl mx-auto">
          Browse all {bookMentions.length} book mentions, curated from thoughtful voices across literature, science, philosophy, and beyond.
        </p>
      </div>
      
      <!-- Search and Filters -->
      <div class="max-w-2xl mx-auto space-y-6">
        <!-- Search -->
        <div class="relative">
          <input 
            type="text" 
            id="search-input"
            placeholder="Search books, authors, or mentioners..."
            class="w-full px-6 py-4 text-base border border-stone-200 dark:border-stone-700 rounded-xl bg-white/80 dark:bg-stone-800/80 backdrop-blur-sm text-stone-900 dark:text-stone-100 placeholder-stone-500 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all"
          >
          <div class="absolute right-4 top-1/2 -translate-y-1/2 text-stone-400">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
        
        <!-- Filters -->
        <div class="flex flex-wrap gap-4">
          <!-- Sentiment Filter -->
          <div class="flex items-center space-x-2">
            <label class="text-sm font-medium text-stone-700 dark:text-stone-300">Sentiment:</label>
            <select 
              id="sentiment-filter" 
              class="px-3 py-2 text-sm border border-stone-200 dark:border-stone-700 rounded-lg bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
            >
              <option value="all">All</option>
              <option value="positive">Recommended</option>
              <option value="neutral">Referenced</option>
              <option value="critical">Nuanced</option>
            </select>
          </div>
          
          <!-- Tag Filter -->
          <div class="flex items-center space-x-2">
            <label class="text-sm font-medium text-stone-700 dark:text-stone-300">Topic:</label>
            <select 
              id="tag-filter" 
              class="px-3 py-2 text-sm border border-stone-200 dark:border-stone-700 rounded-lg bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
            >
              <option value="all">All Topics</option>
              {uniqueTags.map(tag => (
                <option value={tag}>{tag.charAt(0).toUpperCase() + tag.slice(1).replace('-', ' ')}</option>
              ))}
            </select>
          </div>
          
          <!-- Sort Filter -->
          <div class="flex items-center space-x-2">
            <label class="text-sm font-medium text-stone-700 dark:text-stone-300">Sort:</label>
            <select 
              id="sort-filter" 
              class="px-3 py-2 text-sm border border-stone-200 dark:border-stone-700 rounded-lg bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
            >
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="book-title">Book Title A-Z</option>
              <option value="author">Author A-Z</option>
              <option value="mentioner">Mentioner A-Z</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Results Section -->
  <section class="py-16">
    <div class="max-w-2xl mx-auto px-6">
      <!-- Results Count -->
      <div class="mb-8">
        <p id="results-count" class="text-stone-600 dark:text-stone-400 text-center">
          Showing all {sortedMentions.length} mentions
        </p>
      </div>
      
      <!-- Mentions Feed -->
      <div id="mentions-container" class="space-y-8">
        {sortedMentions.map((mention) => (
          <MentionCard mention={mention} />
        ))}
      </div>
      
      <!-- No Results Message -->
      <div id="no-results" class="hidden text-center py-16">
        <div class="text-stone-400 dark:text-stone-500 text-lg mb-4">ðŸ“š</div>
        <h3 class="text-xl font-medium text-stone-900 dark:text-stone-100 mb-2">No mentions found</h3>
        <p class="text-stone-600 dark:text-stone-400">Try adjusting your search terms or filters.</p>
      </div>
      
      <!-- Load More (for pagination if needed) -->
      <div id="load-more-container" class="hidden text-center mt-12">
        <button 
          id="load-more-btn"
          class="inline-flex items-center gap-2 px-6 py-3 bg-stone-100 hover:bg-stone-200 dark:bg-stone-800 dark:hover:bg-stone-700 text-stone-900 dark:text-stone-100 font-medium rounded-xl transition-colors"
        >
          Load More
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
      </div>
    </div>
  </section>

  <!-- Browse by Tags -->
  <section class="py-16 bg-stone-50 dark:bg-stone-800/50">
    <div class="max-w-4xl mx-auto px-6">
      <h2 class="text-2xl font-light text-stone-900 dark:text-stone-100 mb-8 text-center">
        Browse by Topic
      </h2>
      
      <div class="flex flex-wrap justify-center gap-3">
        {uniqueTags.map(tag => {
          const mentionCount = bookMentions.filter(mention => mention?.metadata?.tags?.includes(tag)).length;
          return (
            <button 
              class="tag-pill inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-stone-600 dark:text-stone-400 bg-white dark:bg-stone-800 border border-stone-200 dark:border-stone-700 rounded-full hover:bg-orange-50 dark:hover:bg-orange-900/20 hover:text-orange-600 dark:hover:text-orange-400 hover:border-orange-200 dark:hover:border-orange-700 transition-all cursor-pointer"
              data-tag={tag}
            >
              #{tag.replace('-', ' ')}
              <span class="bg-stone-100 dark:bg-stone-700 text-xs px-2 py-0.5 rounded-full">
                {mentionCount}
              </span>
            </button>
          );
        })}
      </div>
    </div>
  </section>
</Layout>

<script define:vars={{ mentions: sortedMentions }}>
  let filteredMentions = [...mentions];
  let displayedCount = mentions.length;

  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const sentimentFilter = document.getElementById('sentiment-filter') as HTMLSelectElement;
  const tagFilter = document.getElementById('tag-filter') as HTMLSelectElement;
  const sortFilter = document.getElementById('sort-filter') as HTMLSelectElement;
  const mentionsContainer = document.getElementById('mentions-container') as HTMLElement;
  const resultsCount = document.getElementById('results-count') as HTMLElement;
  const noResults = document.getElementById('no-results') as HTMLElement;
  const tagPills = document.querySelectorAll('.tag-pill') as NodeListOf<HTMLButtonElement>;

  function filterMentions() {
    let filtered = [...mentions];
    const searchTerm = searchInput.value.toLowerCase().trim();
    const selectedSentiment = sentimentFilter.value;
    const selectedTag = tagFilter.value;

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(mention => 
        mention?.book?.title?.toLowerCase().includes(searchTerm) ||
        mention?.book?.author?.toLowerCase().includes(searchTerm) ||
        mention?.source?.name?.toLowerCase().includes(searchTerm) ||
        mention?.mention?.text?.toLowerCase().includes(searchTerm)
      );
    }

    // Sentiment filter
    if (selectedSentiment !== 'all') {
      filtered = filtered.filter(mention => mention?.mention?.sentiment === selectedSentiment);
    }

    // Tag filter
    if (selectedTag !== 'all') {
      filtered = filtered.filter(mention => mention?.metadata?.tags?.includes(selectedTag));
    }

    // Sort
    const sortBy = sortFilter.value;
    switch (sortBy) {
      case 'oldest':
        filtered.sort((a, b) => new Date(a?.metadata?.dateAdded || '').getTime() - new Date(b?.metadata?.dateAdded || '').getTime());
        break;
      case 'book-title':
        filtered.sort((a, b) => (a?.book?.title || '').localeCompare(b?.book?.title || ''));
        break;
      case 'author':
        filtered.sort((a, b) => (a?.book?.author || '').localeCompare(b?.book?.author || ''));
        break;
      case 'mentioner':
        filtered.sort((a, b) => (a?.source?.name || '').localeCompare(b?.source?.name || ''));
        break;
      default: // newest
        filtered.sort((a, b) => new Date(b?.metadata?.dateAdded || '').getTime() - new Date(a?.metadata?.dateAdded || '').getTime());
    }

    filteredMentions = filtered;
    renderMentions();
  }

  function renderMentions() {
    if (filteredMentions.length === 0) {
      mentionsContainer.classList.add('hidden');
      noResults.classList.remove('hidden');
      resultsCount.textContent = 'No mentions found';
    } else {
      mentionsContainer.classList.remove('hidden');
      noResults.classList.add('hidden');
      
      // Update results count
      const count = filteredMentions.length;
      const total = mentions.length;
      resultsCount.textContent = count === total 
        ? `Showing all ${total} mentions`
        : `Showing ${count} of ${total} mentions`;

      // Re-render mentions (in a real app, you'd want more efficient DOM updates)
      // For now, we'll hide/show existing cards based on the filtered results
      const mentionCards = mentionsContainer.querySelectorAll('article');
      mentionCards.forEach((card, index) => {
        const mention = mentions[index];
        if (filteredMentions.some(fm => fm.id === mention.id)) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    }
  }

  // Event listeners
  searchInput.addEventListener('input', filterMentions);
  sentimentFilter.addEventListener('change', filterMentions);
  tagFilter.addEventListener('change', filterMentions);
  sortFilter.addEventListener('change', filterMentions);

  // Tag pill clicks
  tagPills.forEach(pill => {
    pill.addEventListener('click', () => {
      const tag = pill.getAttribute('data-tag');
      if (tag) {
        tagFilter.value = tag;
        filterMentions();
        // Scroll to results
        document.querySelector('#mentions-container')?.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });

  // URL parameters handling
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('tag')) {
    tagFilter.value = urlParams.get('tag') || 'all';
    filterMentions();
  }
</script>